// vite.config.ts
import { loadEnv } from "vite";
import { resolve as resolve2 } from "path";

// package.json
var package_default = {
  name: "vite-project",
  private: true,
  version: "1.0.0",
  type: "module",
  license: "MIT",
  scripts: {
    dev: "vite --mode development",
    build: "vue-tsc && vite build --mode production",
    preview: "vite preview",
    "lint:eslint": "eslint --fix --ext .js,.ts,.vue ./src",
    commit: "git add -A && czg && git push"
  },
  dependencies: {
    "@element-plus/icons-vue": "^2.1.0",
    "@vueuse/core": "^10.3.0",
    axios: "^1.4.0",
    "d3-timer": "^3.0.1",
    dayjs: "^1.11.7",
    "element-plus": "^2.3.12",
    "lodash-es": "^4.17.21",
    mitt: "^3.0.0",
    nprogress: "^0.2.0",
    pinia: "^2.0.36",
    "pinia-persistedstate-plugin": "^0.1.0",
    "pinia-plugin-persistedstate": "^3.1.0",
    qs: "^6.11.1",
    sortablejs: "^1.15.0",
    vue: "^3.3.4",
    "vue-router": "^4.2.4"
  },
  devDependencies: {
    "@types/node": "^18.15.3",
    "@types/nprogress": "^0.2.0",
    "@types/qs": "^6.9.7",
    "@typescript-eslint/eslint-plugin": "^5.55.0",
    "@vitejs/plugin-vue": "^4.2.3",
    "@vitejs/plugin-vue-jsx": "^3.0.1",
    eslint: "^8.36.0",
    "eslint-config-prettier": "^8.7.0",
    "eslint-define-config": "^1.17.0",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-vue": "^9.9.0",
    less: "^4.1.3",
    prettier: "^2.8.4",
    "rollup-plugin-visualizer": "^5.9.0",
    typescript: "^5.0.4",
    "unplugin-auto-import": "^0.15.3",
    "unplugin-vue-components": "^0.24.1",
    "unplugin-vue-setup-extend-plus": "^1.0.0",
    vite: "^4.4.9",
    "vite-plugin-compression": "^0.5.1",
    "vite-plugin-eslint": "^1.8.1",
    "vite-plugin-html": "^3.2.0",
    "vite-plugin-svg-icons": "^2.0.1",
    "vue-tsc": "^1.6.5"
  },
  browserslist: {
    production: [
      "> 1%",
      "not dead",
      "not op_mini all"
    ],
    development: [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
};

// vite.config.ts
import dayjs from "dayjs";

// build/getEnv.ts
import path from "path";
function wrapperEnv(envConf) {
  const ret = {};
  for (const envName of Object.keys(envConf)) {
    let realName = envConf[envName].replace(/\\n/g, "\n");
    realName = realName === "true" ? true : realName === "false" ? false : realName;
    if (envName === "VITE_PORT")
      realName = Number(realName);
    if (envName === "VITE_PROXY") {
      try {
        realName = JSON.parse(realName);
      } catch (error) {
      }
    }
    ret[envName] = realName;
  }
  return ret;
}

// build/proxy.ts
function createProxy(list = []) {
  const ret = {};
  for (const [prefix, target] of list) {
    const httpsRE = /^https:\/\//;
    const isHttps = httpsRE.test(target);
    ret[prefix] = {
      target,
      changeOrigin: true,
      ws: true,
      rewrite: (path2) => path2.replace(new RegExp(`^${prefix}`), ""),
      ...isHttps ? { secure: false } : {}
    };
  }
  return ret;
}

// build/plugins.ts
import { resolve } from "path";
import { visualizer } from "rollup-plugin-visualizer";
import { createHtmlPlugin } from "vite-plugin-html";
import { createSvgIconsPlugin } from "vite-plugin-svg-icons";
import vue from "@vitejs/plugin-vue";
import vueJsx from "@vitejs/plugin-vue-jsx";
import eslintPlugin from "vite-plugin-eslint";
import viteCompression from "vite-plugin-compression";
import vueSetupExtend from "unplugin-vue-setup-extend-plus/vite";
var createVitePlugins = (viteEnv) => {
  return [
    vue(),
    vueJsx(),
    eslintPlugin(),
    vueSetupExtend({}),
    createCompression(viteEnv),
    createHtmlPlugin({
      inject: {
        data: { title: viteEnv.VITE_GLOB_APP_TITLE }
      }
    }),
    createSvgIconsPlugin({
      iconDirs: [resolve(process.cwd(), "src/assets/icons")],
      symbolId: "icon-[dir]-[name]"
    }),
    viteEnv.VITE_REPORT && visualizer({
      filename: "stats.html",
      gzipSize: true,
      brotliSize: true
    })
  ];
};
var createCompression = (viteEnv) => {
  const { VITE_BUILD_COMPRESS = "none", VITE_BUILD_COMPRESS_DELETE_ORIGIN_FILE } = viteEnv;
  const compressList = VITE_BUILD_COMPRESS.split(",");
  const plugins = [];
  if (compressList.includes("gzip")) {
    plugins.push(
      viteCompression({
        ext: ".gz",
        algorithm: "gzip",
        deleteOriginFile: VITE_BUILD_COMPRESS_DELETE_ORIGIN_FILE
      })
    );
  }
  if (compressList.includes("brotli")) {
    plugins.push(
      viteCompression({
        ext: ".br",
        algorithm: "brotliCompress",
        deleteOriginFile: VITE_BUILD_COMPRESS_DELETE_ORIGIN_FILE
      })
    );
  }
  return plugins;
};

// vite.config.ts
var { dependencies, devDependencies, name, version } = package_default;
var __APP_INFO__ = {
  pkg: { dependencies, devDependencies, name, version },
  lastBuildTime: dayjs().format("YYYY-MM-DD HH:mm:ss")
};
var vite_config_default = (configEnv) => {
  const root = process.cwd();
  const env = loadEnv(configEnv.mode, root);
  const viteEnv = wrapperEnv(env);
  return {
    root,
    base: viteEnv.VITE_PUBLIC_PATH,
    publicDir: resolve2("public"),
    resolve: {
      alias: {
        "@": resolve2("/Users/Jiazhigang/Desktop/Project-Template", "./src"),
        "vue-i18n": "vue-i18n/dist/vue-i18n.cjs.js"
      }
    },
    define: {
      __APP_INFO__: JSON.stringify(__APP_INFO__)
    },
    build: {
      outDir: "dist",
      minify: "esbuild",
      reportCompressedSize: false,
      chunkSizeWarningLimit: 2e3,
      emptyOutDir: true,
      target: "es2015",
      rollupOptions: {
        output: {
          chunkFileNames: "js/[name]-[hash].js",
          entryFileNames: "js/[name]-[hash].js",
          assetFileNames: "assets/[ext]/[name]-[hash].[ext]"
        }
      }
    },
    esbuild: {
      pure: viteEnv.VITE_DROP_CONSOLE ? ["console.log", "debugger"] : []
    },
    server: {
      host: "0.0.0.0",
      port: viteEnv.VITE_PORT,
      open: viteEnv.VITE_OPEN,
      cors: true,
      proxy: createProxy(viteEnv.VITE_PROXY)
    },
    plugins: createVitePlugins(viteEnv)
  };
};
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
